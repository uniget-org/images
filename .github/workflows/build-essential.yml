name: build-essential

on:
  push:
    branches-ignore:
    - "renovate/**"
    paths:
    - "build-essential/**"
    - "!build-essential/*/README.md"
    - ".github/workflows/build-essential.yml"
  pull_request:
    types:
    - opened
    - synchronize
    - labeled
    - reopened
    paths:
    - "build-essential/**"
    - "!build-essential/*/README.md"
    - ".github/workflows/build-essential.yml"
  schedule:
  - cron: '0 7 * * *'
  workflow_dispatch:

jobs:
  build:
    name: docker-build
    permissions:
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: build-essential
    strategy:
      matrix:
        IMAGE_TAG:
        - 22.04
        - 24.04
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set SOURCE_DATE_EPOCH
      id: set-source-date-epoch
      run: |
        echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct build-essential/Dockerfile)" >>"${GITHUB_ENV}"

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build
      id: build
      uses: docker/build-push-action@v5
      env:
        SOURCE_DATE_EPOCH: ${{ steps.set-source-date-epoch.outputs.SOURCE_DATE_EPOCH }}
      with:
        context: build-essential
        platforms: linux/amd64,linux/arm64
        provenance: true
        sbom: true
        cache-from: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ matrix.IMAGE_TAG }}
        build-args: |
          VERSION=${{ matrix.IMAGE_TAG }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ matrix.IMAGE_TAG }}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign sign -y ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ matrix.IMAGE_TAG }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'